AI methods:
- DL evaluation		https://github.com/zjeffer/chess-deep-rl
- RL

lookup table, negamax, alphabeta pruning	https://eleonoramisino.altervista.org/tablut-ai/
self play, MCTS		https://medium.com/@samgill1256/reinforcement-learning-in-chess-73d97fad96b3



DONE:
lookup table
BasicSearch

TODO:
research
tree searches
evaluations
camp check on populateEmpty for white

test framework
py function calling


pseudocode:

0. checks the state for win/lose/draw   (state.getTurn())
1. get the game state   (as matrix or array)
2. checks if can win in a move      (TODO)

// then
3. starts the search of the best possible move  (NegaMax con AlphaBeta o MCTS)
    iteration:      (Negamax + AlphaBeta)
        - checks time 
	    - evaluates a level of the tree
        - choose a move

// later
    iteration:      (iterative deepening)
        - checks time 
	    - evaluates a level of the tree
        - choose a move
        - if max_level:
            restart
          else:
            next level



Lesson:
github use
writing good code
how not to use chatGPT